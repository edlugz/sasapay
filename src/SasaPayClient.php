<?php

namespace EdLugz\SasaPay;

use EdLugz\SasaPay\Exceptions\SasaPayRequestException;
use EdLugz\SasaPay\Logging\Log;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\ServerException;
use Illuminate\Support\Facades\Route;

class SasaPayClient
{
    /**
     * Guzzle client initialization.
     *
     * @var Client
     */
    protected Client $client;

    /**
     * Sasapay APIs application client key.
     *
     * @var string
     */
    protected string $clientId;

    /**
     * Sasapay APIs application client secret.
     *
     * @var string
     */
    protected string $clientSecret;

    /**
     * Access token generated by Sasapay APIs.
     *
     * @var string
     */
    protected string $accessToken;

    /**
     * The merchant code assigned for the application on Sasapay API.
     *
     * @var string|int
     */
    protected string|int $merchantCode;

    /**
     * Channel for mobile money operators on Sasapay APIs.
     *
     * @var array
     */
    protected array $channel = [
        'sasapay'      => '0',
        'mpesa'        => '63902',
        'airtel_money' => '63903',
        'tkash'        => '63907',
    ];

    /**
     * Base URL end points for the SasaPay APIs.
     *
     * @var array
     */
    protected array $base_url = [
        'sandbox' => 'https://sandbox.sasapay.app/api/v2/waas/',
        'live'    => 'https://api.sasapay.app/api/v2/waas/',
    ];

    /**
     * Make the initializations required to make calls to the Sasapay APIs
     * and throw the necessary exception if there are any missing required
     * configurations.
     *
     * @throws \EdLugz\SasaPay\Exceptions\SasaPayRequestException
     */
    public function __construct()
    {
        $this->validateConfigurations();

        $mode = config('sasapay.mode');
        $this->merchantCode = config('sasapay.merchant_code');

        $options = [
            'base_uri' => $this->base_url[$mode],
            'verify'   => !($mode === 'sandbox'),
        ];

        if (config('sasapay.logs.enabled')) {
            $options = Log::enable($options);
        }

        $this->client = new Client($options);
        $this->clientId = config('sasapay.client_id');
        $this->clientSecret = config('sasapay.client_secret');
        $this->getAccessToken();
    }

    /**
     * Check if it contains a route name and return full route or
     * return the string assuming it's a full URL.
     *
     * @param $urlConfig
     *
     * @return string
     */
    protected function setUrl($urlConfig): string
    {
        return Route::has($urlConfig) ? route($urlConfig) : $urlConfig;
    }

    /**
     * Get access token from Sasapay APIs.
     *
     * @throws \EdLugz\SasaPay\Exceptions\SasaPayRequestException
     */
    protected function getAccessToken(): void
    {
        // Set the auth option
        $options = [
            'auth' => [
                $this->clientId,
                $this->clientSecret,
            ],
        ];

        $accessTokenDetails = $this->call('auth/token/?grant_type=client_credentials', $options, 'GET');
        $this->accessToken = $accessTokenDetails->access_token;
    }

    /**
     * Validate configurations.
     */
    protected function validateConfigurations(): void
    {
        // Validate keys
        if (empty(config('sasapay.client_id'))) {
            throw new \InvalidArgumentException('client key has not been set.');
        }
        if (empty(config('sasapay.client_secret'))) {
            throw new \InvalidArgumentException('client secret has not been set');
        }
    }

    /**
     * Make API calls to Sasapay APIs.
     *
     * @param string $url
     * @param array  $options
     * @param string $method
     *
     * @throws SasaPayRequestException
     *
     * @return mixed
     */
    protected function call(string $url, array $options = [], string $method = 'POST'): mixed
    {
        if (isset($this->accessToken)) {
            $options['headers'] = ['Authorization' => 'Bearer '.$this->accessToken];
        }

        try {
            $response = $this->client->request($method, $url, $options);

            $stream = $response->getBody();
            $stream->rewind();
            $content = $stream->getContents();

            return json_decode($content);
        } catch (ServerException $e) {
            $response = json_decode($e->getResponse()->getBody()->getContents());
            if (isset($response->Envelope)) {
                $message = 'SasaPay APIs: '.$response->Envelope->Body->Fault->faultstring;

                throw new SasaPayRequestException($message, $e->getCode());
            }

            throw new SasaPayRequestException('SasaPay APIs: '.$response->message, $e->getCode());
        } catch (ClientException $e) {
            $response = json_decode($e->getResponse()->getBody()->getContents());

            throw new SasaPayRequestException('SasaPay APIs: '
                .$response->message, $e->getCode());
        } catch (GuzzleException $e) {
            throw new SasaPayRequestException('SasaPay APIs: '.$e->getMessage(), $e->getCode());
        }
    }
}
